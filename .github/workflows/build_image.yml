name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
    paths:
      - 'Dockerfile'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
  workflow_dispatch:

jobs:
  check_beets_version:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      new_version: ${{ steps.check_version.outputs.new_version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if beets version changed
        id: check_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            CURRENT_VERSION=$(grep -o "beets==.*" Dockerfile | head -1 | sed 's/beets==\([0-9.]*\).*/\1/')
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            # Get the current version
            CURRENT_VERSION=$(grep -o "beets==.*" Dockerfile | head -1 | sed 's/beets==\([0-9.]*\).*/\1/')
            
            # Get the previous version from the file before the change
            git show HEAD~1:Dockerfile > Dockerfile.prev || exit 0
            PREV_VERSION=$(grep -o "beets==.*" Dockerfile.prev 2>/dev/null | head -1 | sed 's/beets==\([0-9.]*\).*/\1/' || echo "")
            rm Dockerfile.prev
            
            # Compare versions
            if [[ "$CURRENT_VERSION" != "$PREV_VERSION" ]]; then
              echo "Beets version changed from $PREV_VERSION to $CURRENT_VERSION"
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "Beets version unchanged: $CURRENT_VERSION"
              echo "version_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

  build:
    needs: check_beets_version
    if: ${{ needs.check_beets_version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create version tag from beets version
        id: version_tag
        run: |
          if [[ "${{ needs.check_beets_version.outputs.new_version }}" != "" ]]; then
            echo "beets_version=${{ needs.check_beets_version.outputs.new_version }}" >> $GITHUB_OUTPUT
          else
            BEETS_VERSION=$(grep -o "beets==.*" Dockerfile | head -1 | sed 's/beets==\([0-9.]*\).*/\1/')
            echo "beets_version=$BEETS_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes based on beets version
        id: release_notes
        run: |
          BEETS_VERSION="${{ steps.version_tag.outputs.beets_version }}"
          
          # Create a temporary file for the release notes
          echo "# Beets v${BEETS_VERSION} Release Notes" > release-notes.md
          echo "" >> release-notes.md
          
          # Fetch release notes from GitHub for the specific version
          RELEASE_URL="https://github.com/beetbox/beets/releases/tag/v${BEETS_VERSION}"
          echo "Fetching release notes from: $RELEASE_URL" 
          
          # Use curl and grep to extract release notes content
          curl -s "$RELEASE_URL" | 
            # Extract content between the release title and the Assets section
            sed -n '/<div class="markdown-body">/,/<\/div>/p' | 
            # Remove HTML tags
            sed 's/<[^>]*>//g' | 
            # Remove blank lines and format properly
            grep -v "^$" | 
            # Add to our release notes file
            tee -a release-notes.md
          
          # If fetching fails or returns empty, use a fallback
          if [ ! -s release-notes.md ]; then
            echo "# Beets v${BEETS_VERSION} Release Notes" > release-notes.md
            echo "" >> release-notes.md
            echo "This Docker image includes Beets version ${BEETS_VERSION}." >> release-notes.md
            echo "" >> release-notes.md
            echo "For complete release notes, visit:" >> release-notes.md
            echo "https://github.com/beetbox/beets/releases/tag/v${BEETS_VERSION}" >> release-notes.md
          fi
          
          # Add our Docker image info
          echo "" >> release-notes.md
          echo "## Docker Image Information" >> release-notes.md
          echo "- Built and published by GitHub Actions workflow" >> release-notes.md
          echo "- Published to: ghcr.io/gaodes/beets:v${BEETS_VERSION}" >> release-notes.md
          echo "- Build date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
          
          # Prepare release notes for Docker metadata
          RELEASE_NOTES="$(cat release-notes.md)"
          # Use proper escaping for GitHub Actions
          RELEASE_NOTES="${RELEASE_NOTES//'%'/'%25'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\n'/'%0A'}"
          RELEASE_NOTES="${RELEASE_NOTES//$'\r'/'%0D'}"
          echo "content=$RELEASE_NOTES" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/gaodes/beets
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=v${{ steps.version_tag.outputs.beets_version }}
            type=sha,format=short
          labels: |
            org.opencontainers.image.title=Beets Music Organizer
            org.opencontainers.image.description=Lightweight Docker image for beets music organizer v${{ steps.version_tag.outputs.beets_version }}
            org.opencontainers.image.version=v${{ steps.version_tag.outputs.beets_version }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://github.com/gaodes/beets
            org.opencontainers.image.vendor=gaodes
            org.opencontainers.image.base.name=python:3.11-alpine
            org.opencontainers.image.url=https://github.com/gaodes/beets
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            beets.version=${{ steps.version_tag.outputs.beets_version }}
            beets.release.notes=${{ steps.release_notes.outputs.content }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/gaodes/beets:v${{ steps.version_tag.outputs.beets_version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.1

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes ghcr.io/gaodes/beets@${{ steps.build.outputs.digest }}

      - name: Create GitHub Release
        if: ${{ github.event_name == 'push' && needs.check_beets_version.outputs.version_changed == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          name: Beets v${{ steps.version_tag.outputs.beets_version }} Docker Image
          tag_name: v${{ steps.version_tag.outputs.beets_version }}
          body_path: release-notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}